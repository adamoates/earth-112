# Earth-112 Development Rules & Environment Setup

## üèóÔ∏è Project Structure

### Environment Branches
- **`main`** - Production branch (deploys to production)
- **`staging`** - Staging branch (deploys to staging) 
- **`develop`** - Development branch (local development)

### Environment Files
- **`.env.local`** - Local development configuration
- **`.env.staging`** - Staging environment configuration
- **`.env.production`** - Production environment configuration

## üöÄ Quick Environment Setup

### Local Development Setup
```bash
# Switch to local environment
./switch_env.sh local

# Start MySQL (if not running)
mysql.server start

# Run migrations
php artisan migrate:fresh

# Create test user
php artisan tinker --execute="App\Models\User::create(['name' => 'Local Admin', 'email' => 'admin@local.earth-112.com', 'password' => bcrypt('password'), 'email_verified_at' => now(), 'role' => 'admin']);"

# Start development server
php artisan serve
```

### Environment Switching
```bash
# Local development
./switch_env.sh local

# Staging (live data - be careful!)
./switch_env.sh staging

# Production configuration
./switch_env.sh production

# Switch branches with environment
./switch_env.sh develop      # develop branch + local env
./switch_env.sh staging-branch  # staging branch + staging env
./switch_env.sh main         # main branch + production env
```

## üìä Database Configuration

### Local Environment
- **Database**: `earth_112_local`
- **Host**: `127.0.0.1:3306`
- **User**: `earth_112_user`
- **Password**: `earth_112_pass`

### Staging Environment
- **Database**: `earth_112_dev` (live data)
- **Host**: `127.0.0.1:3307`
- **User**: `forge`
- **Password**: Update in `config/environments/.env.staging`

### Production Environment
- **Database**: `earth_112_dev` (live data)
- **Host**: `127.0.0.1:3307`
- **User**: `forge`
- **Password**: Update in `config/environments/.env.production`

## üõ†Ô∏è Development Workflow

### 1. Feature Development
```bash
# Start on develop branch with local environment
git checkout develop
./switch_env.sh local

# Make changes and test locally
php artisan serve

# Commit and push to develop
git add .
git commit -m "feat: add new feature"
git push origin develop
```

### 2. Staging Testing
```bash
# Switch to staging branch
git checkout staging
./switch_env.sh staging

# Test with live data (be careful!)
php artisan serve
```

### 3. Production Deployment
```bash
# Switch to main branch
git checkout main
./switch_env.sh production

# Deploy to production
git push origin main
```

## üîß Available Scripts

### Environment Management
- **`./setup_environments.sh`** - Create environment configurations
- **`./switch_env.sh [local|staging|production]`** - Switch environments
- **`./switch_env.sh [develop|staging-branch|main]`** - Switch branches with environment

### Database Management
- **`mysql.server start`** - Start MySQL
- **`mysql.server stop`** - Stop MySQL
- **`mysql.server status`** - Check MySQL status
- **`php artisan migrate:fresh`** - Reset database
- **`php artisan config:clear`** - Clear config cache

## ‚ö†Ô∏è Important Rules

### Security & Data Safety
1. **Never commit secrets** - Environment files with passwords are in `.gitignore`
2. **Update passwords** - Update staging and production passwords in config files
3. **Be careful with staging** - It uses live data
4. **Local development is safe** - Uses isolated local database

### Code Quality
1. **Follow Laravel conventions** - Use proper naming and structure
2. **Test locally first** - Always test on local environment before staging
3. **Use meaningful commit messages** - Follow conventional commit format
4. **Keep branches clean** - Don't commit directly to main/staging

### Environment Management
1. **Always switch environments** - Use `./switch_env.sh` instead of manual file copying
2. **Clear cache after switching** - Scripts automatically clear cache
3. **Verify database connection** - Test database connection after switching
4. **Update documentation** - Keep this file updated with changes

## üîç Troubleshooting

### MySQL Connection Issues
```bash
# Start MySQL
mysql.server start

# Check MySQL status
mysql.server status

# Stop MySQL
mysql.server stop
```

### Database Issues
```bash
# Clear cache
php artisan config:clear
php artisan cache:clear

# Reset database
php artisan migrate:fresh
```

### Environment Issues
```bash
# Recreate environment configs
./setup_environments.sh

# Switch to local environment
./switch_env.sh local
```

## üìù Test Users

- **Local**: `admin@local.earth-112.com` / `password`
- **Staging**: Use existing users in live database
- **Production**: Use existing users in live database

## üéØ Development Guidelines

### When Making Changes
1. **Start on develop branch** with local environment
2. **Test thoroughly locally** before pushing
3. **Use descriptive commit messages**
4. **Update this file** if adding new scripts or procedures

### When Deploying
1. **Test on staging first** with live data
2. **Verify all functionality** works in staging
3. **Deploy to production** only after staging approval
4. **Monitor production** after deployment

### When Adding Features
1. **Follow Laravel conventions**
2. **Add proper validation**
3. **Include error handling**
4. **Update tests if applicable**
5. **Document new features**

## üö® Emergency Procedures

### If Production Breaks
1. **Immediately revert to last working commit**
2. **Check environment configuration**
3. **Verify database connection**
4. **Test locally before re-deploying**

### If Database Issues Occur
1. **Check MySQL service status**
2. **Verify environment configuration**
3. **Clear application cache**
4. **Check database permissions**

### If Environment Switching Fails
1. **Manually copy environment file**
2. **Clear application cache**
3. **Restart development server**
4. **Check file permissions**

## üìö Additional Resources

- **Laravel Documentation**: https://laravel.com/docs
- **Environment Configuration**: Check `config/environments/` directory
- **Database Migrations**: Check `database/migrations/` directory
- **Application Routes**: Check `routes/` directory

Remember: Always test locally first, be careful with staging data, and never commit secrets to version control! 